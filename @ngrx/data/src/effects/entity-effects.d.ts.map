{"version":3,"file":"entity-effects.d.ts","sources":["entity-effects.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Action } from '@ngrx/store';\nimport { Actions } from '@ngrx/effects';\nimport { Observable, SchedulerLike } from 'rxjs';\nimport { EntityAction } from '../actions/entity-action';\nimport { EntityActionFactory } from '../actions/entity-action-factory';\nimport { EntityOp } from '../actions/entity-op';\nimport { EntityDataService } from '../dataservices/entity-data.service';\nimport { PersistenceResultHandler } from '../dataservices/persistence-result-handler.service';\nexport declare const persistOps: EntityOp[];\nexport declare class EntityEffects {\n    private actions;\n    private dataService;\n    private entityActionFactory;\n    private resultHandler;\n    /**\n     * Injecting an optional Scheduler that will be undefined\n     * in normal application usage, but its injected here so that you can mock out\n     * during testing using the RxJS TestScheduler for simulating passages of time.\n     */\n    private scheduler;\n    /** Delay for error and skip observables. Must be multiple of 10 for marble testing. */\n    private responseDelay;\n    /**\n     * Observable of non-null cancellation correlation ids from CANCEL_PERSIST actions\n     */\n    cancel$: Observable<any>;\n    persist$: Observable<Action>;\n    constructor(actions: Actions<EntityAction>, dataService: EntityDataService, entityActionFactory: EntityActionFactory, resultHandler: PersistenceResultHandler, \n    /**\n     * Injecting an optional Scheduler that will be undefined\n     * in normal application usage, but its injected here so that you can mock out\n     * during testing using the RxJS TestScheduler for simulating passages of time.\n     */\n    scheduler: SchedulerLike);\n    /**\n     * Perform the requested persistence operation and return a scalar Observable<Action>\n     * that the effect should dispatch to the store after the server responds.\n     * @param action A persistence operation EntityAction\n     */\n    persist(action: EntityAction): Observable<Action>;\n    private callDataService;\n    /**\n     * Handle error result of persistence operation on an EntityAction,\n     * returning a scalar observable of error action\n     */\n    private handleError$;\n    /**\n     * Because EntityAction.payload.skip is true, skip the persistence step and\n     * return a scalar success action that looks like the operation succeeded.\n     */\n    private handleSkipSuccess$;\n}\n"]}