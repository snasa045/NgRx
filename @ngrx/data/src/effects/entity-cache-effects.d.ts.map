{"version":3,"file":"entity-cache-effects.d.ts","sources":["entity-cache-effects.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Action } from '@ngrx/store';\nimport { Actions } from '@ngrx/effects';\nimport { Observable, SchedulerLike } from 'rxjs';\nimport { EntityActionFactory } from '../actions/entity-action-factory';\nimport { SaveEntities, SaveEntitiesCancel } from '../actions/entity-cache-action';\nimport { EntityCacheDataService } from '../dataservices/entity-cache-data.service';\nimport { Logger } from '../utils/interfaces';\nexport declare class EntityCacheEffects {\n    private actions;\n    private dataService;\n    private entityActionFactory;\n    private logger;\n    /**\n     * Injecting an optional Scheduler that will be undefined\n     * in normal application usage, but its injected here so that you can mock out\n     * during testing using the RxJS TestScheduler for simulating passages of time.\n     */\n    private scheduler;\n    /** Delay for error and skip observables. Must be multiple of 10 for marble testing. */\n    private responseDelay;\n    constructor(actions: Actions, dataService: EntityCacheDataService, entityActionFactory: EntityActionFactory, logger: Logger, \n    /**\n     * Injecting an optional Scheduler that will be undefined\n     * in normal application usage, but its injected here so that you can mock out\n     * during testing using the RxJS TestScheduler for simulating passages of time.\n     */\n    scheduler: SchedulerLike);\n    /**\n     * Observable of SAVE_ENTITIES_CANCEL actions with non-null correlation ids\n     */\n    saveEntitiesCancel$: Observable<SaveEntitiesCancel>;\n    saveEntities$: Observable<Action>;\n    /**\n     * Perform the requested SaveEntities actions and return a scalar Observable<Action>\n     * that the effect should dispatch to the store after the server responds.\n     * @param action The SaveEntities action\n     */\n    saveEntities(action: SaveEntities): Observable<Action>;\n    /** return handler of error result of saveEntities, returning a scalar observable of error action */\n    private handleSaveEntitiesError$;\n    /** return handler of the ChangeSet result of successful saveEntities() */\n    private handleSaveEntitiesSuccess$;\n}\n"]}