{"version":3,"file":"entity-action-factory.d.ts","sources":["entity-action-factory.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EntityOp } from './entity-op';\nimport { EntityAction, EntityActionOptions, EntityActionPayload } from './entity-action';\nexport declare class EntityActionFactory {\n    /**\n     * Create an EntityAction to perform an operation (op) for a particular entity type\n     * (entityName) with optional data and other optional flags\n     * @param entityName Name of the entity type\n     * @param entityOp Operation to perform (EntityOp)\n     * @param [data] data for the operation\n     * @param [options] additional options\n     */\n    create<P = any>(entityName: string, entityOp: EntityOp, data?: P, options?: EntityActionOptions): EntityAction<P>;\n    /**\n     * Create an EntityAction to perform an operation (op) for a particular entity type\n     * (entityName) with optional data and other optional flags\n     * @param payload Defines the EntityAction and its options\n     */\n    create<P = any>(payload: EntityActionPayload<P>): EntityAction<P>;\n    /**\n     * Create an EntityAction to perform an operation (op) for a particular entity type\n     * (entityName) with optional data and other optional flags\n     * @param payload Defines the EntityAction and its options\n     */\n    protected createCore<P = any>(payload: EntityActionPayload<P>): {\n        type: string;\n        payload: EntityActionPayload<P>;\n    };\n    /**\n     * Create an EntityAction from another EntityAction, replacing properties with those from newPayload;\n     * @param from Source action that is the base for the new action\n     * @param newProperties New EntityAction properties that replace the source action properties\n     */\n    createFromAction<P = any>(from: EntityAction, newProperties: Partial<EntityActionPayload<P>>): EntityAction<P>;\n    formatActionType(op: string, tag: string): string;\n}\n"]}