{"version":3,"file":"entity-definition.service.d.ts","sources":["entity-definition.service.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EntityDefinition } from './entity-definition';\nimport { EntityMetadata, EntityMetadataMap } from './entity-metadata';\nexport interface EntityDefinitions {\n    [entityName: string]: EntityDefinition<any>;\n}\n/** Registry of EntityDefinitions for all cached entity types */\nexport declare class EntityDefinitionService {\n    /** {EntityDefinition} for all cached entity types */\n    private readonly definitions;\n    constructor(entityMetadataMaps: EntityMetadataMap[]);\n    /**\n     * Get (or create) a data service for entity type\n     * @param entityName - the name of the type\n     *\n     * Examples:\n     *   getDefinition('Hero'); // definition for Heroes, untyped\n     *   getDefinition<Hero>(`Hero`); // definition for Heroes, typed with Hero interface\n     */\n    getDefinition<T>(entityName: string, shouldThrow?: boolean): EntityDefinition<T>;\n    /**\n     * Create and register the {EntityDefinition} for the {EntityMetadata} of an entity type\n     * @param name - the name of the entity type\n     * @param definition - {EntityMetadata} for a collection for that entity type\n     *\n     * Examples:\n     *   registerMetadata(myHeroEntityDefinition);\n     */\n    registerMetadata(metadata: EntityMetadata): void;\n    /**\n     * Register an EntityMetadataMap.\n     * @param metadataMap - a map of entityType names to entity metadata\n     *\n     * Examples:\n     *   registerMetadataMap({\n     *     'Hero': myHeroMetadata,\n     *     Villain: myVillainMetadata\n     *   });\n     */\n    registerMetadataMap(metadataMap?: EntityMetadataMap): void;\n    /**\n     * Register an {EntityDefinition} for an entity type\n     * @param definition - EntityDefinition of a collection for that entity type\n     *\n     * Examples:\n     *   registerDefinition('Hero', myHeroEntityDefinition);\n     */\n    registerDefinition<T>(definition: EntityDefinition<T>): void;\n    /**\n     * Register a batch of EntityDefinitions.\n     * @param definitions - map of entityType name and associated EntityDefinitions to merge.\n     *\n     * Examples:\n     *   registerDefinitions({\n     *     'Hero': myHeroEntityDefinition,\n     *     Villain: myVillainEntityDefinition\n     *   });\n     */\n    registerDefinitions(definitions: EntityDefinitions): void;\n}\n"]}