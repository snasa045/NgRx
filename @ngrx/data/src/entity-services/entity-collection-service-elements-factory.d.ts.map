{"version":3,"file":"entity-collection-service-elements-factory.d.ts","sources":["entity-collection-service-elements-factory.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EntityDispatcher } from '../dispatchers/entity-dispatcher';\nimport { EntityDispatcherFactory } from '../dispatchers/entity-dispatcher-factory';\nimport { EntityDefinitionService } from '../entity-metadata/entity-definition.service';\nimport { EntitySelectors, EntitySelectorsFactory } from '../selectors/entity-selectors';\nimport { EntitySelectors$, EntitySelectors$Factory } from '../selectors/entity-selectors$';\n/** Core ingredients of an EntityCollectionService */\nexport interface EntityCollectionServiceElements<T, S$ extends EntitySelectors$<T> = EntitySelectors$<T>> {\n    readonly dispatcher: EntityDispatcher<T>;\n    readonly entityName: string;\n    readonly selectors: EntitySelectors<T>;\n    readonly selectors$: S$;\n}\n/** Creates the core elements of the EntityCollectionService for an entity type. */\nexport declare class EntityCollectionServiceElementsFactory {\n    private entityDispatcherFactory;\n    private entityDefinitionService;\n    private entitySelectorsFactory;\n    private entitySelectors$Factory;\n    constructor(entityDispatcherFactory: EntityDispatcherFactory, entityDefinitionService: EntityDefinitionService, entitySelectorsFactory: EntitySelectorsFactory, entitySelectors$Factory: EntitySelectors$Factory);\n    /**\n     * Get the ingredients for making an EntityCollectionService for this entity type\n     * @param entityName - name of the entity type\n     */\n    create<T, S$ extends EntitySelectors$<T> = EntitySelectors$<T>>(entityName: string): EntityCollectionServiceElements<T, S$>;\n}\n"]}