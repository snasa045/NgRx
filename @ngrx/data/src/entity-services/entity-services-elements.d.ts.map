{"version":3,"file":"entity-services-elements.d.ts","sources":["entity-services-elements.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Action, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { EntityAction } from '../actions/entity-action';\nimport { EntityCache } from '../reducers/entity-cache';\nimport { EntityDispatcherFactory } from '../dispatchers/entity-dispatcher-factory';\nimport { EntitySelectors$Factory } from '../selectors/entity-selectors$';\nimport { EntityCollectionServiceFactory } from './entity-collection-service-factory';\n/** Core ingredients of an EntityServices class */\nexport declare class EntityServicesElements {\n    /**\n     * Creates EntityCollectionService instances for\n     * a cached collection of T entities in the ngrx store.\n     */\n    readonly entityCollectionServiceFactory: EntityCollectionServiceFactory;\n    /** The ngrx store, scoped to the EntityCache */\n    readonly store: Store<EntityCache>;\n    constructor(\n    /**\n     * Creates EntityCollectionService instances for\n     * a cached collection of T entities in the ngrx store.\n     */\n    entityCollectionServiceFactory: EntityCollectionServiceFactory, \n    /** Creates EntityDispatchers for entity collections */\n    entityDispatcherFactory: EntityDispatcherFactory, \n    /** Creates observable EntitySelectors$ for entity collections. */\n    entitySelectors$Factory: EntitySelectors$Factory, \n    /** The ngrx store, scoped to the EntityCache */\n    store: Store<EntityCache>);\n    /** Observable of error EntityActions (e.g. QUERY_ALL_ERROR) for all entity types */\n    readonly entityActionErrors$: Observable<EntityAction>;\n    /** Observable of the entire entity cache */\n    readonly entityCache$: Observable<EntityCache> | Store<EntityCache>;\n    /**\n     * Actions scanned by the store after it processed them with reducers.\n     * A replay observable of the most recent action reduced by the store.\n     */\n    readonly reducedActions$: Observable<Action>;\n}\n"]}