{"version":3,"file":"entity-services-base.d.ts","sources":["entity-services-base.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Action, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { EntityAction } from '../actions/entity-action';\nimport { EntityCache } from '../reducers/entity-cache';\nimport { EntityCollectionService } from './entity-collection-service';\nimport { EntityCollectionServiceFactory } from './entity-collection-service-factory';\nimport { EntityCollectionServiceMap, EntityServices } from './entity-services';\nimport { EntitySelectors$ } from '../selectors/entity-selectors$';\nimport { EntityServicesElements } from './entity-services-elements';\n/**\n * Base/default class of a central registry of EntityCollectionServices for all entity types.\n * Create your own subclass to add app-specific members for an improved developer experience.\n *\n * @example\n * export class EntityServices extends EntityServicesBase {\n *   constructor(entityServicesElements: EntityServicesElements) {\n *     super(entityServicesElements);\n *   }\n *   // Extend with well-known, app entity collection services\n *   // Convenience property to return a typed custom entity collection service\n *   get companyService() {\n *     return this.getEntityCollectionService<Model.Company>('Company') as CompanyService;\n *   }\n *   // Convenience dispatch methods\n *   clearCompany(companyId: string) {\n *     this.dispatch(new ClearCompanyAction(companyId));\n *   }\n * }\n */\nexport declare class EntityServicesBase implements EntityServices {\n    private entityServicesElements;\n    constructor(entityServicesElements: EntityServicesElements);\n    /** Observable of error EntityActions (e.g. QUERY_ALL_ERROR) for all entity types */\n    readonly entityActionErrors$: Observable<EntityAction>;\n    /** Observable of the entire entity cache */\n    readonly entityCache$: Observable<EntityCache> | Store<EntityCache>;\n    /** Factory to create a default instance of an EntityCollectionService */\n    readonly entityCollectionServiceFactory: EntityCollectionServiceFactory;\n    /**\n     * Actions scanned by the store after it processed them with reducers.\n     * A replay observable of the most recent action reduced by the store.\n     */\n    readonly reducedActions$: Observable<Action>;\n    /** The ngrx store, scoped to the EntityCache */\n    protected readonly store: Store<EntityCache>;\n    /** Dispatch any action to the store */\n    dispatch(action: Action): void;\n    /** Registry of EntityCollectionService instances */\n    private readonly EntityCollectionServices;\n    /**\n     * Create a new default instance of an EntityCollectionService.\n     * Prefer getEntityCollectionService() unless you really want a new default instance.\n     * This one will NOT be registered with EntityServices!\n     * @param entityName {string} Name of the entity type of the service\n     */\n    protected createEntityCollectionService<T, S$ extends EntitySelectors$<T> = EntitySelectors$<T>>(entityName: string): EntityCollectionService<T>;\n    /** Get (or create) the singleton instance of an EntityCollectionService\n     * @param entityName {string} Name of the entity type of the service\n     */\n    getEntityCollectionService<T, S$ extends EntitySelectors$<T> = EntitySelectors$<T>>(entityName: string): EntityCollectionService<T>;\n    /** Register an EntityCollectionService under its entity type name.\n     * Will replace a pre-existing service for that type.\n     * @param service {EntityCollectionService} The entity service\n     * @param serviceName {string} optional service name to use instead of the service's entityName\n     */\n    registerEntityCollectionService<T>(service: EntityCollectionService<T>, serviceName?: string): void;\n    /**\n     * Register entity services for several entity types at once.\n     * Will replace a pre-existing service for that type.\n     * @param entityCollectionServices {EntityCollectionServiceMap | EntityCollectionService<any>[]}\n     * EntityCollectionServices to register, either as a map or an array\n     */\n    registerEntityCollectionServices(entityCollectionServices: EntityCollectionServiceMap | EntityCollectionService<any>[]): void;\n}\n"]}