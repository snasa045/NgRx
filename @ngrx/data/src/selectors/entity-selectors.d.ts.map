{"version":3,"file":"entity-selectors.d.ts","sources":["entity-selectors.d.ts"],"names":[],"mappingssourcesContent":["import { MemoizedSelector } from '@ngrx/store';\nimport { Selector } from '@ngrx/store';\nimport { Dictionary } from '@ngrx/entity';\nimport { EntityCache } from '../reducers/entity-cache';\nimport { EntityCacheSelector } from './entity-cache-selector';\nimport { EntityCollection, ChangeStateMap } from '../reducers/entity-collection';\nimport { EntityCollectionCreator } from '../reducers/entity-collection-creator';\nimport { EntityMetadata } from '../entity-metadata/entity-metadata';\n/**\n * The selector functions for entity collection members,\n * Selects from the entity collection to the collection member\n * Contrast with {EntitySelectors}.\n */\nexport interface CollectionSelectors<T> {\n    readonly [selector: string]: any;\n    /** Count of entities in the cached collection. */\n    readonly selectCount: Selector<EntityCollection<T>, number>;\n    /** All entities in the cached collection. */\n    readonly selectEntities: Selector<EntityCollection<T>, T[]>;\n    /** Map of entity keys to entities */\n    readonly selectEntityMap: Selector<EntityCollection<T>, Dictionary<T>>;\n    /** Filter pattern applied by the entity collection's filter function */\n    readonly selectFilter: Selector<EntityCollection<T>, string>;\n    /** Entities in the cached collection that pass the filter function */\n    readonly selectFilteredEntities: Selector<EntityCollection<T>, T[]>;\n    /** Keys of the cached collection, in the collection's native sort order */\n    readonly selectKeys: Selector<EntityCollection<T>, string[] | number[]>;\n    /** True when the collection has been fully loaded. */\n    readonly selectLoaded: Selector<EntityCollection<T>, boolean>;\n    /** True when a multi-entity query command is in progress. */\n    readonly selectLoading: Selector<EntityCollection<T>, boolean>;\n    /** ChangeState (including original values) of entities with unsaved changes */\n    readonly selectChangeState: Selector<EntityCollection<T>, ChangeStateMap<T>>;\n}\n/**\n * The selector functions for entity collection members,\n * Selects from store root, through EntityCache, to the entity collection member\n * Contrast with {CollectionSelectors}.\n */\nexport interface EntitySelectors<T> {\n    /** Name of the entity collection for these selectors */\n    readonly entityName: string;\n    readonly [name: string]: MemoizedSelector<EntityCollection<T>, any> | string;\n    /** The cached EntityCollection itself */\n    readonly selectCollection: MemoizedSelector<Object, EntityCollection<T>>;\n    /** Count of entities in the cached collection. */\n    readonly selectCount: MemoizedSelector<Object, number>;\n    /** All entities in the cached collection. */\n    readonly selectEntities: MemoizedSelector<Object, T[]>;\n    /** The EntityCache */\n    readonly selectEntityCache: MemoizedSelector<Object, EntityCache>;\n    /** Map of entity keys to entities */\n    readonly selectEntityMap: MemoizedSelector<Object, Dictionary<T>>;\n    /** Filter pattern applied by the entity collection's filter function */\n    readonly selectFilter: MemoizedSelector<Object, string>;\n    /** Entities in the cached collection that pass the filter function */\n    readonly selectFilteredEntities: MemoizedSelector<Object, T[]>;\n    /** Keys of the cached collection, in the collection's native sort order */\n    readonly selectKeys: MemoizedSelector<Object, string[] | number[]>;\n    /** True when the collection has been fully loaded. */\n    readonly selectLoaded: MemoizedSelector<Object, boolean>;\n    /** True when a multi-entity query command is in progress. */\n    readonly selectLoading: MemoizedSelector<Object, boolean>;\n    /** ChangeState (including original values) of entities with unsaved changes */\n    readonly selectChangeState: MemoizedSelector<Object, ChangeStateMap<T>>;\n}\n/** Creates EntitySelector functions for entity collections. */\nexport declare class EntitySelectorsFactory {\n    private entityCollectionCreator;\n    private selectEntityCache;\n    constructor(entityCollectionCreator?: EntityCollectionCreator, selectEntityCache?: EntityCacheSelector);\n    /**\n     * Create the NgRx selector from the store root to the named collection,\n     * e.g. from Object to Heroes.\n     * @param entityName the name of the collection\n     */\n    createCollectionSelector<T = any, C extends EntityCollection<T> = EntityCollection<T>>(entityName: string): MemoizedSelector<Object, C, import(\"@ngrx/store/src/selector\").DefaultProjectorFn<C>>;\n    /**\n     * Creates entity collection selectors from metadata.\n     * @param metadata - EntityMetadata for the collection.\n     * May be partial but much have `entityName`.\n     */\n    createCollectionSelectors<T, S extends CollectionSelectors<T> = CollectionSelectors<T>>(metadata: EntityMetadata<T>): S;\n    /**\n     * Creates default entity collection selectors for an entity type.\n     * Use the metadata overload for additional collection selectors.\n     * @param entityName - name of the entity type\n     */\n    createCollectionSelectors<T, S extends CollectionSelectors<T> = CollectionSelectors<T>>(entityName: string): S;\n    /**\n     * Creates the store-rooted selectors for an entity collection.\n     * {EntitySelectors$Factory} turns them into selectors$.\n     *\n     * @param metadata - EntityMetadata for the collection.\n     * May be partial but much have `entityName`.\n     *\n     * Based on ngrx/entity/state_selectors.ts\n     * Differs in that these selectors select from the NgRx store root,\n     * through the collection, to the collection members.\n     */\n    create<T, S extends EntitySelectors<T> = EntitySelectors<T>>(metadata: EntityMetadata<T>): S;\n    /**\n     * Creates the default store-rooted selectors for an entity collection.\n     * {EntitySelectors$Factory} turns them into selectors$.\n     * Use the metadata overload for additional collection selectors.\n     *\n     * @param entityName - name of the entity type.\n     *\n     * Based on ngrx/entity/state_selectors.ts\n     * Differs in that these selectors select from the NgRx store root,\n     * through the collection, to the collection members.\n     */\n    create<T, S extends EntitySelectors<T> = EntitySelectors<T>>(entityName: string): S;\n}\n"]}