{"version":3,"file":"entity-selectors$.d.ts","sources":["entity-selectors$.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Store } from '@ngrx/store';\nimport { Actions } from '@ngrx/effects';\nimport { Dictionary } from '@ngrx/entity';\nimport { Observable } from 'rxjs';\nimport { EntityAction } from '../actions/entity-action';\nimport { EntityCacheSelector } from './entity-cache-selector';\nimport { EntitySelectors } from './entity-selectors';\nimport { EntityCache } from '../reducers/entity-cache';\nimport { EntityCollection, ChangeStateMap } from '../reducers/entity-collection';\n/**\n * The selector observable functions for entity collection members.\n */\nexport interface EntitySelectors$<T> {\n    /** Name of the entity collection for these selectors$ */\n    readonly entityName: string;\n    /** Observable of the collection as a whole */\n    readonly collection$: Observable<EntityCollection> | Store<EntityCollection>;\n    /** Observable of count of entities in the cached collection. */\n    readonly count$: Observable<number> | Store<number>;\n    /** Observable of all entities in the cached collection. */\n    readonly entities$: Observable<T[]> | Store<T[]>;\n    /** Observable of actions related to this entity type. */\n    readonly entityActions$: Observable<EntityAction>;\n    /** Observable of the map of entity keys to entities */\n    readonly entityMap$: Observable<Dictionary<T>> | Store<Dictionary<T>>;\n    /** Observable of error actions related to this entity type. */\n    readonly errors$: Observable<EntityAction>;\n    /** Observable of the filter pattern applied by the entity collection's filter function */\n    readonly filter$: Observable<string> | Store<string>;\n    /** Observable of entities in the cached collection that pass the filter function */\n    readonly filteredEntities$: Observable<T[]> | Store<T[]>;\n    /** Observable of the keys of the cached collection, in the collection's native sort order */\n    readonly keys$: Observable<string[] | number[]> | Store<string[] | number[]>;\n    /** Observable true when the collection has been loaded */\n    readonly loaded$: Observable<boolean> | Store<boolean>;\n    /** Observable true when a multi-entity query command is in progress. */\n    readonly loading$: Observable<boolean> | Store<boolean>;\n    /** ChangeState (including original values) of entities with unsaved changes */\n    readonly changeState$: Observable<ChangeStateMap<T>> | Store<ChangeStateMap<T>>;\n}\n/** Creates observable EntitySelectors$ for entity collections. */\nexport declare class EntitySelectors$Factory {\n    private store;\n    private actions;\n    private selectEntityCache;\n    /** Observable of the EntityCache */\n    entityCache$: Observable<EntityCache>;\n    /** Observable of error EntityActions (e.g. QUERY_ALL_ERROR) for all entity types */\n    entityActionErrors$: Observable<EntityAction>;\n    constructor(store: Store<any>, actions: Actions<EntityAction>, selectEntityCache: EntityCacheSelector);\n    /**\n     * Creates an entity collection's selectors$ observables for this factory's store.\n     * `selectors$` are observable selectors of the cached entity collection.\n     * @param entityName - is also the name of the collection.\n     * @param selectors - selector functions for this collection.\n     **/\n    create<T, S$ extends EntitySelectors$<T> = EntitySelectors$<T>>(entityName: string, selectors: EntitySelectors<T>): S$;\n}\n"]}