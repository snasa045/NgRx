{"version":3,"file":"entity-cache-dispatcher.d.ts","sources":["entity-cache-dispatcher.d.ts"],"names":[],"mappingssourcesContent":["import { Action, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { CorrelationIdGenerator } from '../utils/correlation-id-generator';\nimport { EntityActionOptions } from '../actions/entity-action';\nimport { EntityCache } from '../reducers/entity-cache';\nimport { EntityDispatcherDefaultOptions } from './entity-dispatcher-default-options';\nimport { MergeStrategy } from '../actions/merge-strategy';\nimport { ChangeSet, ChangeSetItem } from '../actions/entity-cache-change-set';\nimport { EntityCacheQuerySet } from '../actions/entity-cache-action';\n/**\n * Dispatches Entity Cache actions to the EntityCache reducer\n */\nexport declare class EntityCacheDispatcher {\n    /** Generates correlation ids for query and save methods */\n    private correlationIdGenerator;\n    /**\n     * Dispatcher options configure dispatcher behavior such as\n     * whether add is optimistic or pessimistic by default.\n     */\n    private defaultDispatcherOptions;\n    /** The store, scoped to the EntityCache */\n    private store;\n    /**\n     * Actions scanned by the store after it processed them with reducers.\n     * A replay observable of the most recent action reduced by the store.\n     */\n    reducedActions$: Observable<Action>;\n    private raSubscription;\n    constructor(\n    /** Generates correlation ids for query and save methods */\n    correlationIdGenerator: CorrelationIdGenerator, \n    /**\n     * Dispatcher options configure dispatcher behavior such as\n     * whether add is optimistic or pessimistic by default.\n     */\n    defaultDispatcherOptions: EntityDispatcherDefaultOptions, \n    /** Actions scanned by the store after it processed them with reducers. */\n    scannedActions$: Observable<Action>, \n    /** The store, scoped to the EntityCache */\n    store: Store<EntityCache>);\n    /**\n     * Dispatch an Action to the store.\n     * @param action the Action\n     * @returns the dispatched Action\n     */\n    dispatch(action: Action): Action;\n    /**\n     * Dispatch action to cancel the saveEntities request with matching correlation id.\n     * @param correlationId The correlation id for the corresponding action\n     * @param [reason] explains why canceled and by whom.\n     * @param [entityNames] array of entity names so can turn off loading flag for their collections.\n     * @param [tag] tag to identify the operation from the app perspective.\n     */\n    cancelSaveEntities(correlationId: any, reason?: string, entityNames?: string[], tag?: string): void;\n    /** Clear the named entity collections in cache\n     * @param [collections] Array of names of the collections to clear.\n     * If empty array, does nothing. If null/undefined/no array, clear all collections.\n     * @param [tag] tag to identify the operation from the app perspective.\n     */\n    clearCollections(collections?: string[], tag?: string): void;\n    /**\n     * Load multiple entity collections at the same time.\n     * before any selectors$ observables emit.\n     * @param collections The collections to load, typically the result of a query.\n     * @param [tag] tag to identify the operation from the app perspective.\n     * in the form of a map of entity collections.\n     */\n    loadCollections(collections: EntityCacheQuerySet, tag?: string): void;\n    /**\n     * Merges entities from a query result\n     * that returned entities from multiple collections.\n     * Corresponding entity cache reducer should add and update all collections\n     * at the same time, before any selectors$ observables emit.\n     * @param querySet The result of the query in the form of a map of entity collections.\n     * These are the entity data to merge into the respective collections.\n     * @param mergeStrategy How to merge a queried entity when it is already in the collection.\n     * The default is MergeStrategy.PreserveChanges\n     * @param [tag] tag to identify the operation from the app perspective.\n     */\n    mergeQuerySet(querySet: EntityCacheQuerySet, mergeStrategy?: MergeStrategy, tag?: string): void;\n    /**\n     * Create entity cache action for replacing the entire entity cache.\n     * Dangerous because brute force but useful as when re-hydrating an EntityCache\n     * from local browser storage when the application launches.\n     * @param cache New state of the entity cache\n     * @param [tag] tag to identify the operation from the app perspective.\n     */\n    setEntityCache(cache: EntityCache, tag?: string): void;\n    /**\n     * Dispatch action to save multiple entity changes to remote storage.\n     * Relies on an Ngrx Effect such as EntityEffects.saveEntities$.\n     * Important: only call if your server supports the SaveEntities protocol\n     * through your EntityDataService.saveEntities method.\n     * @param changes Either the entities to save, as an array of {ChangeSetItem}, or\n     * a ChangeSet that holds such changes.\n     * @param url The server url which receives the save request\n     * @param [options] options such as tag, correlationId, isOptimistic, and mergeStrategy.\n     * These values are defaulted if not supplied.\n     * @returns A terminating Observable<ChangeSet> with data returned from the server\n     * after server reports successful save OR the save error.\n     * TODO: should return the matching entities from cache rather than the raw server data.\n     */\n    saveEntities(changes: ChangeSetItem[] | ChangeSet, url: string, options?: EntityActionOptions): Observable<ChangeSet>;\n    /**\n     * Return Observable of data from the server-success SaveEntities action with\n     * the given Correlation Id, after that action was processed by the ngrx store.\n     * or else put the server error on the Observable error channel.\n     * @param crid The correlationId for both the save and response actions.\n     */\n    private getSaveEntitiesResponseData$;\n}\n"]}