{"version":3,"file":"entity-data-without-effects.module.d.ts","sources":["entity-data-without-effects.module.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,mDAAmB;AACvE;AACA;;;AACA","sourcesContent":["import { ModuleWithProviders, Injector, InjectionToken, OnDestroy } from '@angular/core';\nimport { Action, MetaReducer, ReducerManager } from '@ngrx/store';\nimport { EntityAction } from './actions/entity-action';\nimport { EntityCache } from './reducers/entity-cache';\nimport { EntityCollection } from './reducers/entity-collection';\nimport { EntityMetadataMap } from './entity-metadata/entity-metadata';\nimport { EntityCacheReducerFactory } from './reducers/entity-cache-reducer';\nexport interface EntityDataModuleConfig {\n    entityMetadata?: EntityMetadataMap;\n    entityCacheMetaReducers?: (MetaReducer<EntityCache, Action> | InjectionToken<MetaReducer<EntityCache, Action>>)[];\n    entityCollectionMetaReducers?: MetaReducer<EntityCollection, EntityAction>[];\n    initialEntityCacheState?: EntityCache | (() => EntityCache);\n    pluralNames?: {\n        [name: string]: string;\n    };\n}\n/**\n * Module without effects or dataservices which means no HTTP calls\n * This module helpful for internal testing.\n * Also helpful for apps that handle server access on their own and\n * therefore opt-out of @ngrx/effects for entities\n */\nexport declare class EntityDataModuleWithoutEffects implements OnDestroy {\n    private reducerManager;\n    private injector;\n    private entityCacheName;\n    private initialState;\n    private metaReducers;\n    private entityCacheFeature;\n    static forRoot(config: EntityDataModuleConfig): ModuleWithProviders;\n    constructor(reducerManager: ReducerManager, entityCacheReducerFactory: EntityCacheReducerFactory, injector: Injector, entityCacheName: string, initialState: any, metaReducers: (MetaReducer<EntityCache, Action> | InjectionToken<MetaReducer<EntityCache, Action>>)[]);\n    ngOnDestroy(): void;\n}\n"]}