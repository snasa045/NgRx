{"version":3,"file":"http-url-generator.d.ts","sources":["http-url-generator.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA","sourcesContent":["import { Pluralizer } from '../utils/interfaces';\n/**\n * Known resource URLS for specific entity types.\n * Each entity's resource URLS are endpoints that\n * target single entity and multi-entity HTTP operations.\n * Used by the `DefaultHttpUrlGenerator`.\n */\nexport declare abstract class EntityHttpResourceUrls {\n    [entityName: string]: HttpResourceUrls;\n}\n/**\n * Resource URLS for HTTP operations that target single entity\n * and multi-entity endpoints.\n */\nexport interface HttpResourceUrls {\n    /**\n     * The URL path for a single entity endpoint, e.g, `some-api-root/hero/`\n     * such as you'd use to add a hero.\n     * Example: `httpClient.post<Hero>('some-api-root/hero/', addedHero)`.\n     * Note trailing slash (/).\n     */\n    entityResourceUrl: string;\n    /**\n     * The URL path for a multiple-entity endpoint, e.g, `some-api-root/heroes/`\n     * such as you'd use when getting all heroes.\n     * Example: `httpClient.get<Hero[]>('some-api-root/heroes/')`\n     * Note trailing slash (/).\n     */\n    collectionResourceUrl: string;\n}\n/**\n * Generate the base part of an HTTP URL for\n * single entity or entity collection resource\n */\nexport declare abstract class HttpUrlGenerator {\n    /**\n     * Return the base URL for a single entity resource,\n     * e.g., the base URL to get a single hero by its id\n     */\n    abstract entityResource(entityName: string, root: string): string;\n    /**\n     * Return the base URL for a collection resource,\n     * e.g., the base URL to get all heroes\n     */\n    abstract collectionResource(entityName: string, root: string): string;\n    /**\n     * Register known single-entity and collection resource URLs for HTTP calls\n     * @param entityHttpResourceUrls {EntityHttpResourceUrls} resource urls for specific entity type names\n     */\n    abstract registerHttpResourceUrls(entityHttpResourceUrls?: EntityHttpResourceUrls): void;\n}\nexport declare class DefaultHttpUrlGenerator implements HttpUrlGenerator {\n    private pluralizer;\n    /**\n     * Known single-entity and collection resource URLs for HTTP calls.\n     * Generator methods returns these resource URLs for a given entity type name.\n     * If the resources for an entity type name are not know, it generates\n     * and caches a resource name for future use\n     */\n    protected knownHttpResourceUrls: EntityHttpResourceUrls;\n    constructor(pluralizer: Pluralizer);\n    /**\n     * Get or generate the entity and collection resource URLs for the given entity type name\n     * @param entityName {string} Name of the entity type, e.g, 'Hero'\n     * @param root {string} Root path to the resource, e.g., 'some-api`\n     */\n    protected getResourceUrls(entityName: string, root: string): HttpResourceUrls;\n    /**\n     * Create the path to a single entity resource\n     * @param entityName {string} Name of the entity type, e.g, 'Hero'\n     * @param root {string} Root path to the resource, e.g., 'some-api`\n     * @returns complete path to resource, e.g, 'some-api/hero'\n     */\n    entityResource(entityName: string, root: string): string;\n    /**\n     * Create the path to a multiple entity (collection) resource\n     * @param entityName {string} Name of the entity type, e.g, 'Hero'\n     * @param root {string} Root path to the resource, e.g., 'some-api`\n     * @returns complete path to resource, e.g, 'some-api/heroes'\n     */\n    collectionResource(entityName: string, root: string): string;\n    /**\n     * Register known single-entity and collection resource URLs for HTTP calls\n     * @param entityHttpResourceUrls {EntityHttpResourceUrls} resource urls for specific entity type names\n     * Well-formed resource urls end in a '/';\n     * Note: this method does not ensure that resource urls are well-formed.\n     */\n    registerHttpResourceUrls(entityHttpResourceUrls: EntityHttpResourceUrls): void;\n}\n/** Remove leading & trailing spaces or slashes */\nexport declare function normalizeRoot(root: string): string;\n"]}