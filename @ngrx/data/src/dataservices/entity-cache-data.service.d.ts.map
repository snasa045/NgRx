{"version":3,"file":"entity-cache-data.service.d.ts","sources":["entity-cache-data.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { IdSelector } from '@ngrx/entity';\nimport { ChangeSet } from '../actions/entity-cache-change-set';\nimport { DefaultDataServiceConfig } from './default-data-service-config';\nimport { EntityDefinitionService } from '../entity-metadata/entity-definition.service';\nimport { RequestData } from './interfaces';\n/**\n * Default data service for making remote service calls targeting the entire EntityCache.\n * See EntityDataService for services that target a single EntityCollection\n */\nexport declare class EntityCacheDataService {\n    protected entityDefinitionService: EntityDefinitionService;\n    protected http: HttpClient;\n    protected idSelectors: {\n        [entityName: string]: IdSelector<any>;\n    };\n    protected saveDelay: number;\n    protected timeout: number;\n    constructor(entityDefinitionService: EntityDefinitionService, http: HttpClient, config?: DefaultDataServiceConfig);\n    /**\n     * Save changes to multiple entities across one or more entity collections.\n     * Server endpoint must understand the essential SaveEntities protocol,\n     * in particular the ChangeSet interface (except for Update<T>).\n     * This implementation extracts the entity changes from a ChangeSet Update<T>[] and sends those.\n     * It then reconstructs Update<T>[] in the returned observable result.\n     * @param changeSet  An array of SaveEntityItems.\n     * Each SaveEntityItem describe a change operation for one or more entities of a single collection,\n     * known by its 'entityName'.\n     * @param url The server endpoint that receives this request.\n     */\n    saveEntities(changeSet: ChangeSet, url: string): Observable<ChangeSet>;\n    protected handleError(reqData: RequestData): (err: any) => Observable<never>;\n    /**\n     * Filter changeSet to remove unwanted ChangeSetItems.\n     * This implementation excludes null and empty ChangeSetItems.\n     * @param changeSet ChangeSet with changes to filter\n     */\n    protected filterChangeSet(changeSet: ChangeSet): ChangeSet;\n    /**\n     * Convert the entities in update changes from @ngrx Update<T> structure to just T.\n     * Reverse of restoreUpdates().\n     */\n    protected flattenUpdates(changeSet: ChangeSet): ChangeSet;\n    /**\n     * Convert the flattened T entities in update changes back to @ngrx Update<T> structures.\n     * Reverse of flattenUpdates().\n     */\n    protected restoreUpdates(changeSet: ChangeSet): ChangeSet;\n    /**\n     * Get the id (primary key) selector function for an entity type\n     * @param entityName name of the entity type\n     */\n    protected getIdSelector(entityName: string): IdSelector<any>;\n}\n"]}