{"version":3,"file":"entity-cache-reducer.d.ts","sources":["entity-cache-reducer.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Action, ActionReducer } from '@ngrx/store';\nimport { EntityCache } from './entity-cache';\nimport { ClearCollections, LoadCollections, MergeQuerySet, SaveEntities, SaveEntitiesCancel, SaveEntitiesError, SaveEntitiesSuccess } from '../actions/entity-cache-action';\nimport { EntityCollectionCreator } from './entity-collection-creator';\nimport { EntityCollectionReducerRegistry } from './entity-collection-reducer-registry';\nimport { Logger } from '../utils/interfaces';\n/**\n * Creates the EntityCacheReducer via its create() method\n */\nexport declare class EntityCacheReducerFactory {\n    private entityCollectionCreator;\n    private entityCollectionReducerRegistry;\n    private logger;\n    constructor(entityCollectionCreator: EntityCollectionCreator, entityCollectionReducerRegistry: EntityCollectionReducerRegistry, logger: Logger);\n    /**\n     * Create the ngrx-data entity cache reducer which either responds to entity cache level actions\n     * or (more commonly) delegates to an EntityCollectionReducer based on the action.payload.entityName.\n     */\n    create(): ActionReducer<EntityCache, Action>;\n    /**\n     * Reducer to clear multiple collections at the same time.\n     * @param entityCache the entity cache\n     * @param action a ClearCollections action whose payload is an array of collection names.\n     * If empty array, does nothing. If no array, clears all the collections.\n     */\n    protected clearCollectionsReducer(entityCache: EntityCache, action: ClearCollections): EntityCache;\n    /**\n     * Reducer to load collection in the form of a hash of entity data for multiple collections.\n     * @param entityCache the entity cache\n     * @param action a LoadCollections action whose payload is the QuerySet of entity collections to load\n     */\n    protected loadCollectionsReducer(entityCache: EntityCache, action: LoadCollections): EntityCache;\n    /**\n     * Reducer to merge query sets in the form of a hash of entity data for multiple collections.\n     * @param entityCache the entity cache\n     * @param action a MergeQuerySet action with the query set and a MergeStrategy\n     */\n    protected mergeQuerySetReducer(entityCache: EntityCache, action: MergeQuerySet): EntityCache;\n    protected saveEntitiesReducer(entityCache: EntityCache, action: SaveEntities): EntityCache;\n    protected saveEntitiesCancelReducer(entityCache: EntityCache, action: SaveEntitiesCancel): EntityCache;\n    protected saveEntitiesErrorReducer(entityCache: EntityCache, action: SaveEntitiesError): EntityCache;\n    protected saveEntitiesSuccessReducer(entityCache: EntityCache, action: SaveEntitiesSuccess): EntityCache;\n    /** Apply reducer for the action's EntityCollection (if the action targets a collection) */\n    private applyCollectionReducer;\n    /** Ensure loading is false for every collection in entityNames */\n    private clearLoadingFlags;\n}\n"]}